import schedule_students as sts
import numpy as np
import time

#schedule = sts.main()

def replaceEntry(schedule, antecedent, replacement):
    """
        replace entry with a different value convert all antecedent to replacement

        Parameters:
        - schedule: the whole schedule( include A, B, W)
        - antecedent: the value to convert
        - replacement: the value to be converted to

    """
    return [[a if a != antecedent else replacement for a in row] for row in schedule]

"""
for i, sche in enumerate(schedule):
    print(i, "th agent")

    #row = replaceEntry(sche, "Off", "Dorm")
    #row = replaceEntry(row, "Off", "Dorm")
    print(sche)
    if i > 40:
        break

"""
def test():
    """Stupid test function"""
    a = 5
    for i in range(10000):
        a = 5

def test2():
    for i in range(10000):
        # comment
        pass

def rand1():
    for i in range(24*40):
        a = np.random.random(2200)

def rand2():
    for i in range(24*20):
        a = np.random.random(2200-(3*i))


if __name__ == '__main__':
    import timeit
    #print(timeit.timeit("test()", setup="from __main__ import test"))
    #print(timeit.timeit("test2()", setup="from __main__ import test2"))
    #print(timeit.timeit("rand1()", setup="import numpy as np"))
    #print(timeit.timeit("rand2()", setup="import numpy as np"))
    a = [1, 2, 3]
    b = set(a)
    b.add(4)
    b.add(7)
    b.add(99)
    b.discard(9)
    b.discard(99)
    print("random", np.random.choice([1, 2, 3]))
    for x in b:
        print(x)
    """
    t1 = time.time()
    for _ in range(200000):
        a = np.random.random(8000)

    t2 =time.time()
    for _ in range(200000):
        p = 5
    for _ in range(200000):
        z = np.zeros(100000)
    for _ in range(200000):
        v = "greergeg"
    for _ in range(200000):
        y = "greergeg"
    for _ in range(200000):
        t = "greergeg"
    for _ in range(200000):
        w = "greergeg"
    for _ in range(200000):
        t = "greergeg"
    for _ in range(200000):
        i = "greergeg"
    t3 = time.time()
    """
    def a():
        tt = 10

    import cProfile
    import profile
    import model_framework
    def test():
        print(5)

    print("here", 5&1)

    dataDict = dict([
    ('baseModel', ([5.3, 6.4, 3.3, 5.2, 3.4, 4.1, 5.7, 3.8, 3.7, 5.1, 5.0, 4.7, 5.7, 5.6, 4.4, 3.9, 3.6, 3.3, 5.1, 3.3, 3.0, 5.1, 4.6, 3.9, 4.5, 3.5, 4.3, 4.9, 3.9, 4.1, 5.4, 3.5, 4.5, 4.0, 3.9, 4.5, 4.5, 6.2, 4.0, 5.9, 3.3, 4.9, 6.0, 4.6, 4.1, 4.8, 5.0, 3.9, 5.2, 4.8, 4.9, 3.0, 4.8, 4.6, 4.5, 3.5, 2.9, 4.1, 3.5, 5.0, 3.7, 5.1, 4.7, 4.5, 2.8, 4.2, 3.4, 4.0, 5.2, 4.2, 4.5, 4.2, 3.6, 4.2, 4.1, 4.9, 5.4, 3.4, 5.1, 4.2, 4.2, 5.6, 4.0, 2.8, 3.5, 3.9, 3.6, 5.2, 3.8, 4.5, 4.3, 4.6, 4.5, 4.7, 4.0, 5.1, 3.5, 4.1, 3.3, 3.1], ('(npMean, stdev, rangeVal, median)', (4.339000000000001, 0.7933341036410826, 3.6000000000000005, 4.25)))),
    ('facemasks', ([1.7, 3.7, 2.8, 3.0, 2.7, 2.4, 2.9, 2.3, 3.9, 2.9, 3.0, 2.5, 2.2, 2.1, 2.6, 1.4, 1.7, 3.6, 2.4, 2.4, 2.4, 2.3, 2.1, 2.2, 3.2, 1.5, 3.0, 2.2, 1.9, 2.4, 2.3, 2.2, 3.2, 2.4, 2.9, 2.6, 1.4, 2.0, 1.5, 2.9, 3.3, 2.3, 1.4, 2.6, 1.8, 1.7, 2.6, 1.4, 2.5, 2.3, 2.6, 2.7, 2.5, 3.3, 2.3, 1.9, 2.0, 3.2, 2.0, 2.9, 2.2, 1.3, 2.8, 3.7, 2.6, 2.7, 3.0, 1.5, 2.5, 2.5, 2.9, 1.5, 2.2, 2.3, 1.4, 2.3, 2.1, 2.5, 2.5, 2.3, 2.5, 2.7, 2.0, 2.2, 1.6, 1.9, 3.5, 2.7, 2.1, 2.8, 2.1, 2.7, 2.4, 1.5, 2.8, 2.3, 3.2, 3.0, 2.5, 3.0], ('(npMean, stdev, rangeVal, median)', (2.424, 0.5702841397058136, 2.5999999999999996, 2.4)))),
    ('highDeden', ([3.8, 3.3, 2.9, 3.4, 2.9, 3.2, 2.7, 3.0, 3.5, 2.1, 2.4, 2.0, 2.1, 2.6, 3.9, 4.1, 1.7, 2.1, 2.1, 1.9, 2.2, 2.6, 3.8, 3.3, 2.5, 3.3, 2.9, 2.6, 2.4, 3.0, 3.6, 3.0, 3.7, 3.8, 2.9, 2.8, 3.3, 4.0, 3.6, 2.4, 3.0, 3.1, 3.4, 3.1, 2.8, 3.3, 2.8, 4.2, 1.4, 3.4, 3.3, 4.1, 3.3, 2.7, 3.5, 3.1, 2.7, 3.0, 3.3, 3.6, 2.2, 3.5, 2.6, 2.7, 2.4, 2.4, 2.5, 2.3, 3.2, 3.2, 2.6, 2.6, 2.8, 2.8, 3.3, 3.1, 3.1, 2.9, 2.4, 2.9, 3.1, 3.3, 1.8, 4.5, 2.8, 2.0, 1.9, 2.7, 2.8, 2.9, 3.1, 2.7, 2.3, 2.5, 3.1, 2.3, 2.3, 4.1, 1.8, 2.4], ('(npMean, stdev, rangeVal, median)', (2.9040000000000004, 0.6097409285918077, 3.1, 2.9)))),
    ('lessSocial', ([3.6, 2.5, 3.6, 1.7, 3.1, 3.3, 3.2, 3.8, 3.3, 2.9, 3.0, 2.7, 3.8, 2.9, 2.5, 3.4, 3.0, 2.8, 1.8, 3.3, 2.6, 2.7, 3.2, 2.9, 3.3, 3.0, 2.6, 2.5, 3.1, 1.9, 2.5, 2.2, 2.9, 5.3, 3.6, 2.6, 3.6, 4.3, 3.0, 2.8, 2.2, 2.5, 2.9, 2.8, 2.2, 2.8, 2.9, 4.1, 4.4, 4.3, 3.1, 3.2, 3.5, 3.5, 2.3, 2.5, 3.1, 2.5, 3.1, 2.7, 2.8, 2.8, 3.3, 3.3, 2.4, 3.4, 2.5, 3.3, 2.6, 4.9, 3.8, 2.7, 3.2, 2.1, 2.5, 3.8, 2.6, 2.8, 2.7, 3.9, 2.7, 3.0, 3.5, 2.7, 2.4, 2.3, 3.7, 3.9, 3.6, 2.9, 2.8, 2.9, 3.0, 2.4, 3.1, 2.4, 4.2, 3.0, 2.5, 3.5], ('(npMean, stdev, rangeVal, median)', (3.0329999999999995, 0.626427170547383, 3.5999999999999996, 2.9)))),
    ('Quarantine', ([0.5, 1.2, 1.0, 1.3, 1.9, 1.3, 1.2, 0.8, 1.4, 1.2, 0.9, 1.7, 1.2, 1.2, 0.7, 1.3, 1.5, 1.3, 1.8, 1.4, 1.1, 1.1, 1.9, 1.3, 1.5, 1.2, 1.1, 0.9, 1.7, 1.6, 1.4, 1.1, 1.3, 0.7, 1.4, 1.0, 1.3, 0.6, 2.0, 1.3, 1.4, 1.1, 1.0, 1.3, 1.1, 1.6, 0.9, 1.3, 1.1, 1.3, 1.1, 1.5, 1.1, 1.9, 1.9, 1.0, 1.1, 1.0, 1.3, 1.3, 1.3, 1.0, 1.4, 0.8, 1.7, 1.2, 1.8, 1.1, 1.6, 0.6, 1.2, 1.1, 1.0, 1.6, 1.3, 2.1, 1.1, 1.1, 2.4, 1.6, 1.2, 1.0, 1.1, 1.4, 1.4, 1.5, 1.3, 1.8, 1.4, 0.9, 1.2, 1.0, 1.9, 0.9, 1.2, 1.6, 1.2, 1.0, 1.1, 1.2], ('(npMean, stdev, rangeVal, median)', (1.2790000000000001, 0.3380221886208063, 1.9, 1.2)))),
    ('closingDH', ([4.3, 3.7, 3.5, 5.3, 3.5, 3.7, 3.8, 3.8, 5.1, 3.6, 4.5, 3.5, 4.0, 5.9, 4.4, 4.4, 3.9, 5.6, 3.9, 3.1, 4.5, 3.2, 5.1, 5.9, 3.7, 5.7, 4.0, 4.0, 2.5, 4.2, 4.0, 3.7, 4.6, 3.4, 3.5, 3.0, 4.3, 6.9, 3.4, 5.3, 4.9, 3.8, 3.5, 4.6, 3.6, 3.6, 4.2, 4.7, 3.8, 4.0, 2.3, 3.7, 4.8, 5.2, 4.6, 4.4, 4.3, 4.1, 4.4, 4.1, 4.2, 4.0, 4.1, 4.2, 4.2, 4.1, 3.4, 3.9, 4.9, 5.2, 4.6, 3.2, 5.3, 4.5, 5.6, 4.3, 6.1, 2.8, 3.7, 5.6, 3.5, 4.0, 2.5, 3.9, 3.7, 3.7, 2.7, 4.6, 3.4, 3.6, 3.0, 3.6, 5.1, 3.3, 3.3, 4.1, 4.2, 4.3, 4.3, 4.5], ('(npMean, stdev, rangeVal, median)', (4.1419999999999995, 0.8212405250594979, 4.6000000000000005, 4.05)))),
    ('closingDH_0.5', ([6.6, 7.2, 7.0, 5.0, 9.0, 7.6, 5.7, 4.4, 6.7, 8.2, 5.9, 7.8, 6.1, 5.7, 6.2, 6.6, 5.8, 5.8, 5.5, 6.3, 6.5, 6.7, 6.2, 2.9, 7.1, 4.5, 7.6, 6.3, 6.1, 7.2, 8.5, 5.9, 6.1, 6.5, 5.6, 7.4, 6.0, 7.8, 6.4, 6.1, 7.3, 6.7, 5.6, 6.0, 7.4, 5.4, 4.7, 6.2, 6.8, 6.3, 3.5, 7.0, 6.7, 6.2, 6.7, 6.8, 5.6, 9.1, 6.5, 6.0, 6.4, 7.3, 7.5, 8.2, 6.7, 4.4, 7.2, 4.7, 4.3, 6.1, 8.2, 5.3, 7.5, 5.9, 5.9, 5.7, 5.4, 6.7, 4.8, 7.9, 6.6, 6.2, 6.2, 6.1, 6.1, 6.2, 5.9, 7.1, 7.3, 7.8, 6.3, 7.5, 7.8, 6.0, 7.5, 6.2, 6.7, 7.1, 6.9, 6.5], ('(npMean, stdev, rangeVal, median)', (6.431000000000001, 1.0671171444597822, 6.199999999999999, 6.35)))),
    ('Medium+L4', ([1.8, 0.9, 1.0, 1.3, 1.3, 1.1, 1.2, 1.6, 1.1, 0.8, 1.0, 0.7, 1.3, 0.8, 0.9, 0.8, 0.5, 1.2, 0.8, 1.7, 2.0, 1.1, 0.9, 1.3, 1.3, 1.9, 0.9, 1.5, 1.3, 2.4, 0.6, 1.4, 1.8, 1.1, 1.5, 1.0, 1.0, 1.0, 1.9, 1.0, 1.2, 1.3, 1.2, 1.1, 1.1, 1.3, 0.6, 0.9, 1.3, 1.5, 0.5, 1.4, 1.8, 1.0, 1.5, 1.7, 1.8, 1.3, 0.9, 1.3, 0.7, 1.6, 0.8, 1.0, 1.1, 1.8, 1.2, 0.7, 0.9, 1.5, 1.2, 0.6, 1.2, 2.7, 2.0, 1.3, 1.0, 1.3, 1.4, 1.3, 2.0, 1.2, 1.7, 1.4, 1.6, 0.9, 2.2, 2.0, 1.5, 1.6, 1.2, 2.3, 1.2, 0.7, 2.0, 0.9, 1.8, 0.0, 1.2, 1.5], ('(npMean, stdev, rangeVal, median)', (1.276, 0.4530165559888512, 2.7, 1.2)))),
    ('Medium+L3', ([0.9, 0.6, 0.7, 1.3, 1.8, 0.6, 1.2, 1.0, 1.5, 2.3, 1.4, 1.2, 1.3, 1.5, 2.0, 0.8, 0.5, 0.8, 0.9, 0.9, 1.2, 1.0, 1.0, 1.2, 1.2, 1.3, 1.8, 0.9, 1.0, 1.3, 0.6, 0.8, 0.7, 0.7, 1.4, 1.3, 0.7, 2.1, 1.4, 2.1, 0.9, 1.5, 1.0, 1.5, 0.7, 0.5, 0.9, 0.8, 1.5, 1.2, 1.4, 0.9, 0.6, 2.0, 2.0, 0.6, 2.1, 2.0, 1.9, 1.3, 1.3, 0.6, 1.9, 0.8, 1.3, 2.3, 1.7, 0.9, 1.2, 1.0, 0.6, 1.3, 1.6, 1.4, 0.7, 1.4, 1.2, 0.8, 1.4, 1.1, 1.4, 1.5, 1.0, 1.5, 1.0, 1.0, 1.5, 0.5, 0.8, 1.1, 1.8, 0.3, 0.9, 1.3, 0.5, 0.8, 1.0, 1.6, 1.4, 1.2], ('(npMean, stdev, rangeVal, median)', (1.1880000000000002, 0.452831094338717, 1.9999999999999998, 1.2)))),
    ('Medium+L2', ([0.4, 1.2, 1.0, 0.8, 1.0, 1.0, 1.2, 0.7, 0.8, 1.0, 1.1, 1.1, 1.9, 1.6, 1.5, 1.1, 1.0, 1.4, 1.1, 1.0, 1.7, 1.0, 1.4, 1.4, 0.9, 0.9, 0.8, 1.4, 1.2, 1.1, 0.9, 1.2, 1.7, 2.3, 0.9, 2.5, 1.1, 1.3, 1.3, 1.1, 1.6, 0.8, 2.0, 1.4, 1.2, 0.8, 0.7, 1.0, 1.0, 1.0, 1.8, 0.9, 0.9, 1.7, 1.0, 1.4, 0.8, 1.9, 0.9, 0.9, 1.8, 0.4, 1.0, 1.9, 0.5, 0.9, 1.6, 1.6, 1.8, 0.4, 1.2, 2.1, 0.9, 1.0, 1.0, 0.8, 0.6, 1.3, 0.4, 0.5, 0.9, 0.9, 0.8, 0.9, 0.8, 1.3, 1.0, 0.9, 0.7, 1.2, 1.2, 1.1, 1.3, 1.5, 0.6, 0.3, 1.7, 0.8, 1.0, 1.3], ('(npMean, stdev, rangeVal, median)', (1.1360000000000001, 0.42438661618858814, 2.2, 1.0)))),
    ('Medium+L1', ([1.7, 1.6, 1.5, 0.6, 1.2, 0.4, 1.4, 0.8, 1.4, 1.2, 0.5, 1.3, 0.6, 0.6, 0.9, 1.4, 0.6, 1.0, 1.1, 1.1, 0.7, 0.9, 1.3, 1.1, 1.4, 1.2, 0.6, 0.7, 1.2, 1.3, 0.6, 0.9, 1.1, 0.5, 1.3, 0.7, 0.7, 0.9, 0.6, 1.4, 0.9, 1.3, 1.7, 0.9, 1.0, 1.0, 0.8, 1.4, 1.4, 0.9, 0.9, 1.0, 0.9, 0.8, 1.2, 1.5, 1.0, 1.1, 1.6, 0.8, 3.2, 0.2, 1.0, 1.1, 1.6, 1.7, 1.4, 0.7, 0.9, 1.1, 0.9, 1.5, 1.1, 1.3, 1.6, 1.0, 1.7, 0.9, 0.6, 1.2, 1.0, 0.7, 0.7, 1.7, 1.1, 1.3, 0.9, 1.4, 0.7, 0.7, 1.1, 1.0, 2.2, 1.3, 0.3, 1.1, 0.5, 1.3, 0.8, 0.8], ('(npMean, stdev, rangeVal, median)', (1.0739999999999998, 0.4203855373344806, 3.0, 1.0)))),
    ('WA_WP', ([1.8, 1.2, 1.1, 1.1, 1.4, 1.2, 1.2, 1.6, 1.4, 1.2, 2.0, 1.1, 2.0, 1.1, 1.1, 1.4, 0.9, 1.5, 1.4, 2.2, 0.8, 1.1, 1.9, 0.5, 1.0, 1.4, 1.6, 1.2, 0.7, 1.5, 2.0, 1.5, 1.9, 0.8, 1.0, 1.5, 2.3, 1.0, 0.7, 1.3, 1.6, 2.0, 1.8, 1.8, 1.1, 1.6, 1.2, 1.8, 1.3, 1.1, 1.7, 0.9, 0.8, 1.7, 2.0, 1.8, 1.3, 1.2, 0.6, 1.5, 1.6, 1.2, 0.8, 2.2, 1.5, 1.7, 1.4, 1.2, 0.8, 1.6, 1.2, 0.9, 1.4, 1.6, 1.1, 1.5, 1.3, 1.0, 1.2, 1.5, 1.3, 0.6, 0.8, 1.8, 1.2, 0.8, 1.6, 1.6, 2.0, 0.9, 1.5, 0.9, 0.7, 1.2, 1.3, 1.7, 2.1, 0.6, 1.1, 1.1], ('(npMean, stdev, rangeVal, median)', (1.3389999999999997, 0.41009633014695457, 1.7999999999999998, 1.3)))),
    ('WA_MP', ([2.0, 1.1, 1.5, 0.7, 1.2, 1.2, 0.7, 1.1, 0.8, 0.7, 0.4, 1.4, 1.0, 1.1, 0.7, 0.6, 0.7, 1.2, 1.1, 1.0, 1.1, 0.7, 0.9, 0.9, 1.3, 1.4, 1.6, 1.0, 1.0, 0.9, 0.7, 1.8, 0.9, 0.8, 1.0, 0.4, 1.5, 0.7, 0.5, 0.9, 1.2, 1.0, 1.4, 1.2, 2.0, 0.9, 1.0, 0.5, 0.5, 0.3, 1.2, 1.3, 0.8, 0.6, 0.9, 1.4, 1.1, 0.3, 0.3, 0.6, 1.3, 1.2, 1.6, 0.8, 1.2, 1.2, 1.2, 1.5, 1.4, 0.8, 1.7, 1.1, 0.8, 2.0, 0.7, 0.2, 1.4, 1.3, 1.3, 1.8, 1.3, 1.4, 1.8, 1.1, 0.7, 0.6, 0.5, 1.1, 1.5, 1.4, 1.2, 0.8, 0.6, 1.2, 1.1, 0.2, 1.0, 2.0, 0.5, 0.4], ('(npMean, stdev, rangeVal, median)', (1.036, 0.4186932051036893, 1.8, 1.05)))),
    ('WA_SP', ([0.6, 0.2, 0.5, 0.6, 0.6, 0.5, 0.4, 0.5, 1.2, 0.5, 0.2, 0.2, 0.7, 0.2, 0.3, 0.4, 0.2, 0.5, 0.8, 0.5, 1.0, 0.2, 0.6, 0.8, 0.2, 1.4, 0.5, 0.7, 0.3, 0.7, 0.7, 1.1, 1.2, 0.9, 0.1, 0.7, 0.0, 0.7, 1.0, 0.5, 0.7, 0.4, 0.2, 0.4, 0.3, 0.9, 0.9, 0.3, 0.5, 1.1, 0.2, 0.9, 0.8, 0.1, 0.4, 0.4, 0.9, 0.9, 0.3, 0.9, 0.4, 0.1, 0.6, 0.4, 0.4, 0.6, 0.6, 0.4, 0.3, 0.9, 1.7, 0.6, 0.5, 0.3, 0.4, 0.3, 0.1, 0.1, 0.2, 0.7, 0.6, 0.4, 0.6, 0.5, 0.1, 0.3, 0.4, 0.3, 0.7, 0.9, 0.6, 0.3, 0.6, 1.1, 0.8, 0.4, 0.8, 0.1, 0.6, 0.6], ('(npMean, stdev, rangeVal, median)', (0.547, 0.3135139550323079, 1.7, 0.5)))),
    ('MA_WP', ([1.0, 1.5, 0.7, 1.2, 1.5, 0.8, 1.5, 1.7, 1.6, 0.8, 1.5, 0.5, 0.8, 1.1, 1.0, 0.7, 1.9, 1.3, 1.1, 1.4, 1.2, 1.3, 1.2, 0.6, 0.8, 2.0, 1.1, 1.6, 1.3, 1.1, 2.0, 1.1, 1.3, 1.0, 1.2, 1.2, 1.4, 2.0, 1.1, 1.3, 0.9, 1.1, 1.1, 0.8, 1.3, 1.1, 0.9, 1.6, 1.8, 0.9, 1.1, 0.8, 1.4, 1.0, 1.1, 0.9, 1.5, 1.7, 1.0, 1.1, 0.8, 1.0, 1.1, 0.7, 1.2, 1.5, 1.9, 1.2, 0.9, 0.4, 1.0, 0.6, 1.1, 0.6, 1.2, 1.9, 1.3, 1.2, 0.7, 1.0, 1.7, 1.3, 1.0, 0.9, 1.3, 0.8, 1.0, 1.1, 1.1, 0.7, 1.3, 0.5, 1.0, 1.3, 1.8, 1.3, 1.0, 1.0, 0.9, 0.6], ('(npMean, stdev, rangeVal, median)', (1.1540000000000001, 0.35788825071521974, 1.6, 1.1)))),
    ('MA_MP', ([0.8, 0.7, 0.7, 0.4, 0.6, 0.8, 0.7, 0.7, 0.8, 0.2, 0.7, 1.0, 0.7, 1.5, 0.4, 0.4, 0.5, 1.4, 0.2, 0.7, 1.3, 0.5, 0.6, 0.6, 0.9, 0.8, 0.9, 0.7, 0.9, 1.4, 1.1, 1.1, 0.7, 0.3, 0.7, 0.8, 0.8, 1.1, 0.3, 1.5, 0.5, 0.6, 0.9, 1.1, 0.5, 0.8, 1.0, 0.8, 0.6, 0.5, 0.5, 0.9, 0.7, 0.9, 0.8, 1.7, 0.8, 0.7, 0.9, 0.9, 1.4, 0.8, 0.6, 1.3, 0.5, 0.6, 0.4, 1.3, 1.4, 1.1, 0.6, 0.9, 1.1, 1.7, 1.4, 0.8, 0.6, 0.5, 1.2, 1.0, 0.6, 1.0, 0.8, 0.4, 0.8, 0.9, 0.4, 0.6, 1.1, 0.5, 0.6, 0.9, 1.1, 0.5, 0.7, 0.9, 0.5, 0.9, 0.2, 0.8], ('(npMean, stdev, rangeVal, median)', (0.804, 0.3233944959333724, 1.5, 0.8)))),
    ('MA_SP', ([0.4, 0.3, 0.1, 0.2, 0.2, 0.3, 0.7, 0.4, 0.8, 0.3, 0.4, 0.3, 0.5, 0.7, 0.1, 0.4, 0.7, 0.7, 0.4, 0.2, 0.3, 0.8, 0.5, 0.3, 0.0, 0.2, 0.4, 0.0, 0.3, 0.7, 0.3, 0.2, 0.1, 0.2, 0.2, 0.3, 0.3, 0.2, 0.4, 0.4, 0.1, 0.2, 0.2, 0.5, 0.2, 0.7, 0.2, 0.1, 0.3, 0.1, 0.2, 0.3, 0.2, 0.1, 0.5, 0.6, 0.2, 0.2, 0.4, 0.1, 0.1, 0.3, 0.3, 0.4, 0.2, 0.1, 0.6, 0.8, 0.3, 0.3, 0.2, 0.1, 0.0, 0.3, 0.4, 0.6, 0.5, 0.2, 0.2, 0.2, 0.2, 0.3, 0.5, 0.6, 0.1, 0.3, 0.2, 0.1, 0.4, 0.5, 0.8, 0.3, 0.3, 0.3, 0.2, 0.4, 0.7, 0.2, 0.3, 0.2], ('(npMean, stdev, rangeVal, median)', (0.326, 0.19678414570284875, 0.8, 0.3)))),
    ('SA_WP', ([1.0, 0.8, 0.9, 0.5, 1.2, 0.8, 0.5, 1.0, 1.0, 0.7, 0.9, 1.0, 0.6, 0.5, 0.6, 0.9, 0.7, 0.9, 1.1, 0.8, 0.9, 1.0, 0.5, 0.9, 0.6, 1.0, 0.9, 0.9, 1.0, 0.8, 0.5, 0.8, 0.9, 1.2, 0.7, 0.8, 1.2, 0.9, 0.7, 1.2, 0.6, 1.3, 0.5, 0.8, 0.9, 0.8, 0.9, 0.7, 1.3, 1.3, 1.2, 0.6, 1.1, 0.8, 1.1, 0.7, 1.0, 0.5, 0.8, 1.6, 1.0, 0.9, 0.9, 0.5, 0.5, 0.9, 1.2, 0.8, 0.9, 0.9, 1.0, 0.7, 0.9, 1.2, 1.6, 0.5, 0.7, 1.1, 1.0, 0.8, 0.8, 0.8, 1.2, 0.6, 0.9, 0.4, 0.6, 0.8, 0.6, 0.8, 0.8, 1.0, 0.7, 0.8, 1.2, 0.5, 0.7, 1.0, 0.6, 0.8], ('(npMean, stdev, rangeVal, median)', (0.8589999999999999, 0.24087133494876473, 1.2000000000000002, 0.8500000000000001)))),
    ('SA_MP', ([0.5, 0.5, 0.4, 0.7, 0.6, 0.6, 0.2, 0.8, 0.8, 0.3, 0.3, 0.5, 0.6, 0.5, 0.5, 0.4, 0.5, 0.3, 0.3, 0.3, 0.7, 0.5, 0.2, 0.5, 0.6, 0.5, 1.0, 0.3, 0.9, 0.9, 0.9, 1.0, 0.3, 0.7, 0.8, 0.5, 0.9, 0.5, 0.5, 0.2, 0.6, 0.5, 0.3, 0.5, 0.2, 0.5, 0.7, 0.6, 0.7, 0.3, 0.2, 0.3, 0.4, 0.3, 0.3, 0.5, 0.2, 0.5, 0.6, 0.6, 0.5, 0.4, 0.2, 0.4, 0.4, 0.3, 0.6, 0.3, 0.3, 1.1, 0.7, 0.4, 0.7, 0.6, 0.7, 0.2, 0.3, 0.3, 0.7, 0.2, 0.7, 0.6, 0.4, 0.0, 0.5, 0.5, 0.6, 0.6, 0.4, 0.4, 0.6, 0.1, 0.2, 0.2, 0.3, 0.5, 0.3, 0.5, 0.7, 0.4], ('(npMean, stdev, rangeVal, median)', (0.486, 0.21448543074064494, 1.1, 0.5)))),
    ('SA_SP', ([0.1, 0.2, 0.0, 0.2, 0.0, 0.1, 0.1, 0.1, 0.0, 0.2, 0.0, 0.0, 0.1, 0.1, 0.0, 0.1, 0.1, 0.1, 0.0, 0.1, 0.0, 0.2, 0.1, 0.2, 0.1, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.1, 0.1, 0.1, 0.2, 0.0, 0.1, 0.0, 0.1, 0.1, 0.1, 0.3, 0.1, 0.0, 0.2, 0.1, 0.0, 0.0, 0.1, 0.2, 0.2, 0.0, 0.0, 0.1, 0.2, 0.2, 0.3, 0.1, 0.0, 0.2, 0.1, 0.3, 0.0, 0.0, 0.0, 0.2, 0.2, 0.1, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.4, 0.1, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.4, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.2, 0.2, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.2, 0.1], ('(npMean, stdev, rangeVal, median)', (0.09399999999999999, 0.0925418824100742, 0.4, 0.1))))
    ])

    for k, v in dataDict.items():
        dataDict[k] = v[0]

    import fileRelated as flr
    import pandas as pd
    modelName = "R0export"
    dfobj = pd.DataFrame.from_dict(dataDict, orient="index")
    flr.save_df_to_csv(flr.fullPath(modelName+".csv", "outputs"), dfobj)







if __name__ == '__main__':
    pass
    #profile.runctx('model_framework.main()', globals(), {})